/*
 * Copyright (c) 2017-2019, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/** ===========================================================================
 *  @file       CC1352P_MESHNODE.h
 *
 *  @brief      CC1352P_MESHNODE Board Specific header file.
 *
 *  The CC1352P_MESHNODE header file should be included in an application as
 *  follows:
 *  @code
 *  #include "CC1352P_MESHNODE.h"
 *  @endcode
 *
 *  ===========================================================================
 */
#ifndef __CC1352P_MESHNODE_BOARD_H__
#define __CC1352P_MESHNODE_BOARD_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "contiki-conf.h"

/* Includes */
#include <ti/drivers/PIN.h>
#include <ti/devices/DeviceFamily.h>
#include DeviceFamily_constructPath(driverlib/ioc.h)

/* Externs */
extern const PIN_Config BoardGpioInitTable[];

/* Defines */
#define CC1352P_MESHNODE

/* Mapping of pins to board signals using general board aliases
 *      <board signal alias>         <pin mapping>   <comments>
 */

/* Mapping of pins to board signals using general board aliases
 *      <board signal alias>                  <pin mapping>
 */
/* Analog Capable DIOs */
#define CC1352P_MESHNODE_DIO23_ANALOG          IOID_23
#define CC1352P_MESHNODE_DIO24_ANALOG          IOID_24
#define CC1352P_MESHNODE_DIO25_ANALOG          IOID_25
#define CC1352P_MESHNODE_DIO26_ANALOG          IOID_26
#define CC1352P_MESHNODE_DIO27_ANALOG          IOID_27

/* RF Antenna Switch */
#define CC1352P_MESHNODE_DIO28_RF_24GHZ        IOID_15
#define CC1352P_MESHNODE_DIO29_RF_HIGH_PA      IOID_16
#define CC1352P_MESHNODE_DIO30_RF_SUB1GHZ      IOID_14

#define CC1352P_MESHNODE_DIO_SEL_RF_24GHZ      IOID_15
#define CC1352P_MESHNODE_DIO_SEL_RF_HIGH_PA    IOID_16
#define CC1352P_MESHNODE_DIO_SEL_RF_SUB1GHZ    IOID_14


/* Digital IOs */
#define CC1352P_MESHNODE_DIO_USBCONNECTED      IOID_7

#define CC1352P_MESHNODE_DIO_ANTSEL_SUBGHZ     IOID_17
#define CC1352P_MESHNODE_DIO_ANTSEL_EXT        IOID_18
#define CC1352P_MESHNODE_DIO_ANTSEL_24GHZ      IOID_19

#define CC1352P_MESHNODE_DIO_CONNECT_BATT      IOID_20
#define CC1352P_MESHNODE_DIO_CHARGER_EN        IOID_21
#define CC1352P_MESHNODE_DIO_CHARGER_STAT      IOID_22

#define CC1352P_MESHNODE_DIO_BLE_GPIO          IOID_24

#define CC1352P_MESHNODE_DIO_FLASH_RESETn      IOID_27
#define CC1352P_MESHNODE_DIO_FLASH_WPn         IOID_28

#define CC1352P_MESHNODE_DIO_ADC_VCC_IN        IOID_29
#define CC1352P_MESHNODE_DIO_ADC_NTC           IOID_30


/* Digital IOs */
#define CC1352P_MESHNODE_DIO12                 IOID_12
#define CC1352P_MESHNODE_DIO15                 IOID_15
#define CC1352P_MESHNODE_DIO16_TDO             IOID_16
#define CC1352P_MESHNODE_DIO17_TDI             IOID_17
#define CC1352P_MESHNODE_DIO21                 IOID_21
#define CC1352P_MESHNODE_DIO22                 IOID_22

/* Discrete Inputs */
#define CC1352P_MESHNODE_PIN_BTN1              IOID_23
#define CC1352P_MESHNODE_PIN_BTN2              PIN_UNASSIGNED

/* GPIO */
#define CC1352P_MESHNODE_GPIO_LED_ON           1
#define CC1352P_MESHNODE_GPIO_LED_OFF          0

/* I2C */
#define CC1352P_MESHNODE_I2C0_SCL0             PIN_UNASSIGNED
#define CC1352P_MESHNODE_I2C0_SDA0             PIN_UNASSIGNED

/* I2S */
#define CC1352P_MESHNODE_I2S_ADO               IOID_25
#define CC1352P_MESHNODE_I2S_ADI               IOID_26
#define CC1352P_MESHNODE_I2S_BCLK              IOID_27
#define CC1352P_MESHNODE_I2S_MCLK              PIN_UNASSIGNED
#define CC1352P_MESHNODE_I2S_WCLK              IOID_28

/* LEDs */
#define CC1352P_MESHNODE_PIN_LED_ON            0
#define CC1352P_MESHNODE_PIN_LED_OFF           1
#define CC1352P_MESHNODE_PIN_RLED              IOID_5
#define CC1352P_MESHNODE_PIN_GLED              IOID_6

/* PWM Outputs */
#define CC1352P_MESHNODE_PWMPIN0               CC1352P_MESHNODE_PIN_RLED
#define CC1352P_MESHNODE_PWMPIN1               CC1352P_MESHNODE_PIN_GLED
#define CC1352P_MESHNODE_PWMPIN2               PIN_UNASSIGNED
#define CC1352P_MESHNODE_PWMPIN3               PIN_UNASSIGNED
#define CC1352P_MESHNODE_PWMPIN4               PIN_UNASSIGNED
#define CC1352P_MESHNODE_PWMPIN5               PIN_UNASSIGNED
#define CC1352P_MESHNODE_PWMPIN6               PIN_UNASSIGNED
#define CC1352P_MESHNODE_PWMPIN7               PIN_UNASSIGNED

/* SPI */
#define CC1352P_MESHNODE_SPI_FLASH_CS          PIN_UNASSIGNED
#define CC1352P_MESHNODE_FLASH_CS_ON           0
#define CC1352P_MESHNODE_FLASH_CS_OFF          1

/* SPI Board */
#define CC1352P_MESHNODE_SPI0_MISO             IOID_8
#define CC1352P_MESHNODE_SPI0_MOSI             IOID_9
#define CC1352P_MESHNODE_SPI0_CLK              IOID_10
#define CC1352P_MESHNODE_SPI0_CSN              IOID_11
#define CC1352P_MESHNODE_SPI1_MISO             PIN_UNASSIGNED
#define CC1352P_MESHNODE_SPI1_MOSI             PIN_UNASSIGNED
#define CC1352P_MESHNODE_SPI1_CLK              PIN_UNASSIGNED
#define CC1352P_MESHNODE_SPI1_CSN              PIN_UNASSIGNED

/* UART Board */
#define CC1352P_MESHNODE_UART0_RX              IOID_12         /* RXD */
#define CC1352P_MESHNODE_UART0_TX              IOID_13         /* TXD */
#define CC1352P_MESHNODE_UART0_CTS             PIN_UNASSIGNED  /* CTS */
#define CC1352P_MESHNODE_UART0_RTS             PIN_UNASSIGNED  /* RTS */

#define CC1352P_MESHNODE_UART1_RX              IOID_25
#define CC1352P_MESHNODE_UART1_TX              IOID_26
#define CC1352P_MESHNODE_UART1_CTS             PIN_UNASSIGNED
#define CC1352P_MESHNODE_UART1_RTS             PIN_UNASSIGNED
/* For backward compatibility */
#define CC1352P_MESHNODE_UART_RX               CC1352P_MESHNODE_UART0_RX
#define CC1352P_MESHNODE_UART_TX               CC1352P_MESHNODE_UART0_TX
#define CC1352P_MESHNODE_UART_CTS              CC1352P_MESHNODE_UART0_CTS
#define CC1352P_MESHNODE_UART_RTS              CC1352P_MESHNODE_UART0_RTS

// App-specific pin configurations.

#define BOARD_PINCONFIG_PIN_RLED               CC1352P_MESHNODE_PIN_RLED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_OPENDRAIN | PIN_DRVSTR_MAX  // Active low.
#define BOARD_PINCONFIG_PIN_GLED               CC1352P_MESHNODE_PIN_GLED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_OPENDRAIN | PIN_DRVSTR_MAX  // Active low.
#define BOARD_PINCONFIG_PIN_BTN1               CC1352P_MESHNODE_PIN_BTN1 | PIN_INPUT_EN | PIN_NOPULL | PIN_IRQ_BOTHEDGES | PIN_HYSTERESIS       // Active low.

#define BOARD_PINCONFIG_UART0_RX               CC1352P_MESHNODE_UART0_RX | PIN_INPUT_EN | PIN_NOPULL
#define BOARD_PINCONFIG_UART0_TX               CC1352P_MESHNODE_UART0_TX | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL
#define BOARD_PINCONFIG_UART1_RX               CC1352P_MESHNODE_UART1_RX | PIN_INPUT_EN | PIN_NOPULL
#define BOARD_PINCONFIG_UART1_TX               CC1352P_MESHNODE_UART1_TX | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL

#define BOARD_PINCONFIG_SPI0_MOSI              CC1352P_MESHNODE_SPI0_MOSI | PIN_INPUT_EN | PIN_NOPULL
#define BOARD_PINCONFIG_SPI0_MISO              CC1352P_MESHNODE_SPI0_MISO | PIN_INPUT_EN | PIN_NOPULL
#define BOARD_PINCONFIG_SPI0_CLK               CC1352P_MESHNODE_SPI0_CLK | PIN_INPUT_EN | PIN_NOPULL
#define BOARD_PINCONFIG_SPI0_CSN               CC1352P_MESHNODE_SPI0_CSN | PIN_INPUT_EN | PIN_NOPULL

#define BOARD_PINCONFIG_DIO_SEL_RF_24GHZ       CC1352P_MESHNODE_DIO_SEL_RF_24GHZ | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX    // Path disabled. Driver enables based on radio configuration.
#define BOARD_PINCONFIG_DIO_SEL_RF_HIGH_PA     CC1352P_MESHNODE_DIO_SEL_RF_HIGH_PA | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX  // Path disabled. Driver enables based on radio configuration.
#define BOARD_PINCONFIG_DIO_SEL_RF_SUB1GHZ     CC1352P_MESHNODE_DIO_SEL_RF_SUB1GHZ | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX // Path disabled. Driver enables based on radio configuration.

#define BOARD_PINCONFIG_DIO_ANTSEL_SUBGHZ      CC1352P_MESHNODE_DIO_ANTSEL_SUBGHZ | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX  // Path disabled.
#define BOARD_PINCONFIG_DIO_ANTSEL_EXT         CC1352P_MESHNODE_DIO_ANTSEL_EXT | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX      // Path disabled.
#define BOARD_PINCONFIG_DIO_ANTSEL_24GHZ       CC1352P_MESHNODE_DIO_ANTSEL_24GHZ | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX    // Path enabled.

#define BOARD_PINCONFIG_DIO_USBCONNECTED       CC1352P_MESHNODE_DIO_USBCONNECTED | PIN_INPUT_EN | PIN_NOPULL | PIN_HYSTERESIS           // Active high.
#define BOARD_PINCONFIG_DIO_CONNECT_BATT       CC1352P_MESHNODE_DIO_CONNECT_BATT | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_OPENSOURCE  // Active high.
#define BOARD_PINCONFIG_DIO_CHARGER_EN         CC1352P_MESHNODE_DIO_CHARGER_EN | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_OPENSOURCE    // Active high.
#define BOARD_PINCONFIG_DIO_CHARGER_STAT       CC1352P_MESHNODE_DIO_CHARGER_STAT | PIN_INPUT_EN | PIN_NOPULL | PIN_HYSTERESIS           // Active high.
#define BOARD_PINCONFIG_DIO_BLE_GPIO           CC1352P_MESHNODE_DIO_BLE_GPIO | PIN_INPUT_EN | PIN_NOPULL
#define BOARD_PINCONFIG_DIO_FLASH_RESETn       CC1352P_MESHNODE_DIO_FLASH_RESETn | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL // Active low.
#define BOARD_PINCONFIG_DIO_FLASH_WPn          CC1352P_MESHNODE_DIO_FLASH_WPn | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL    // Active low.



/*!
 *  @brief  Initialize the general board specific settings
 *
 *  This function initializes the general board specific settings.
 */
void CC1352P_MESHNODE_initGeneral(void);

/*!
 * \brief Initializes the antenna switch IOs.
 *
 * This function sets up the antenna switch and occupies
 * the necessary IO pins. After calling this function, they
 * cannot be used in the application anymore.
 */
void CC1352P_MESHNODE_initAntennaSwitch(void);

/*!
 *  @def    CC1352P_MESHNODE_ADCBufName
 *  @brief  Enum of ADCs
 */
typedef enum CC1352P_MESHNODE_ADCBufName {
    CC1352P_MESHNODE_ADCBUF0 = 0,

    CC1352P_MESHNODE_ADCBUFCOUNT
} CC1352P_MESHNODE_ADCBufName;

/*!
 *  @def    CC1352P_MESHNODE_ADCBuf0ChannelName
 *  @brief  Enum of ADCBuf channels
 */
typedef enum CC1352P_MESHNODE_ADCBuf0ChannelName {
    CC1352P_MESHNODE_ADCBUF0CHANNEL0 = 0,
    CC1352P_MESHNODE_ADCBUF0CHANNEL1,
    CC1352P_MESHNODE_ADCBUF0CHANNEL2,
    CC1352P_MESHNODE_ADCBUF0CHANNEL3,
    CC1352P_MESHNODE_ADCBUF0CHANNEL4,
    CC1352P_MESHNODE_ADCBUF0CHANNELVDDS,
    CC1352P_MESHNODE_ADCBUF0CHANNELDCOUPL,
    CC1352P_MESHNODE_ADCBUF0CHANNELVSS,

    CC1352P_MESHNODE_ADCBUF0CHANNELCOUNT
} CC1352P_MESHNODE_ADCBuf0ChannelName;

/*!
 *  @def    CC1352P_MESHNODE_ADCName
 *  @brief  Enum of ADCs
 */
typedef enum CC1352P_MESHNODE_ADCName {
    CC1352P_MESHNODE_ADC0 = 0,
    CC1352P_MESHNODE_ADC1,
    CC1352P_MESHNODE_ADC2,
    CC1352P_MESHNODE_ADC3,
    CC1352P_MESHNODE_ADC4,
    CC1352P_MESHNODE_ADCDCOUPL,
    CC1352P_MESHNODE_ADCVSS,
    CC1352P_MESHNODE_ADCVDDS,

    CC1352P_MESHNODE_ADCCOUNT
} CC1352P_MESHNODE_ADCName;

/*!
 *  @def    CC1352P_MESHNODE_ECDHName
 *  @brief  Enum of ECDH names
 */
typedef enum CC1352P_MESHNODE_ECDHName {
    CC1352P_MESHNODE_ECDH0 = 0,

    CC1352P_MESHNODE_ECDHCOUNT
} CC1352P_MESHNODE_ECDHName;

/*!
 *  @def    CC1352P_MESHNODE_ECDSAName
 *  @brief  Enum of ECDSA names
 */
typedef enum CC1352P_MESHNODE_ECDSAName {
    CC1352P_MESHNODE_ECDSA0 = 0,

    CC1352P_MESHNODE_ECDSACOUNT
} CC1352P_MESHNODE_ECDSAName;

/*!
 *  @def    CC1352P_MESHNODE_ECJPAKEName
 *  @brief  Enum of ECJPAKE names
 */
typedef enum CC1352P_MESHNODE_ECJPAKEName {
    CC1352P_MESHNODE_ECJPAKE0 = 0,

    CC1352P_MESHNODE_ECJPAKECOUNT
} CC1352P_MESHNODE_ECJPAKEName;

/*!
 *  @def    CC1352P_MESHNODE_AESCCMName
 *  @brief  Enum of AESCCM names
 */
typedef enum CC1352P_MESHNODE_AESCCMName {
    CC1352P_MESHNODE_AESCCM0 = 0,

    CC1352P_MESHNODE_AESCCMCOUNT
} CC1352P_MESHNODE_AESCCMName;

/*!
 *  @def    CC1352P_MESHNODE_AESGCMName
 *  @brief  Enum of AESGCM names
 */
typedef enum CC1352P_MESHNODE_AESGCMName {
    CC1352P_MESHNODE_AESGCM0 = 0,

    CC1352P_MESHNODE_AESGCMCOUNT
} CC1352P_MESHNODE_AESGCMName;

/*!
 *  @def    CC1352P_MESHNODE_AESCBCName
 *  @brief  Enum of AESCBC names
 */
typedef enum CC1352P_MESHNODE_AESCBCName {
    CC1352P_MESHNODE_AESCBC0 = 0,

    CC1352P_MESHNODE_AESCBCCOUNT
} CC1352P_MESHNODE_AESCBCName;

/*!
 *  @def    CC1352P_MESHNODE_AESCTRName
 *  @brief  Enum of AESCTR names
 */
typedef enum CC1352P_MESHNODE_AESCTRName {
    CC1352P_MESHNODE_AESCTR0 = 0,

    CC1352P_MESHNODE_AESCTRCOUNT
} CC1352P_MESHNODE_AESCTRName;

/*!
 *  @def    CC1352P_MESHNODE_AESECBName
 *  @brief  Enum of AESECB names
 */
typedef enum CC1352P_MESHNODE_AESECBName {
    CC1352P_MESHNODE_AESECB0 = 0,

    CC1352P_MESHNODE_AESECBCOUNT
} CC1352P_MESHNODE_AESECBName;

/*!
 *  @def    CC1352P_MESHNODE_AESCTRDRBGName
 *  @brief  Enum of AESCTRDRBG names
 */
typedef enum CC1352P_MESHNODE_AESCTRDRBGName {
    CC1352P_MESHNODE_AESCTRDRBG0 = 0,

    CC1352P_MESHNODE_AESCTRDRBGCOUNT
} CC1352P_MESHNODE_AESCTRDRBGName;

/*!
 *  @def    CC1352P_MESHNODE_SHA2Name
 *  @brief  Enum of SHA2 names
 */
typedef enum CC1352P_MESHNODE_SHA2Name {
    CC1352P_MESHNODE_SHA20 = 0,

    CC1352P_MESHNODE_SHA2COUNT
} CC1352P_MESHNODE_SHA2Name;

/*!
 *  @def    CC1352P_MESHNODE_TRNGName
 *  @brief  Enum of TRNG names
 */
typedef enum CC1352P_MESHNODE_TRNGName {
    CC1352P_MESHNODE_TRNG0 = 0,

    CC1352P_MESHNODE_TRNGCOUNT
} CC1352P_MESHNODE_TRNGName;

/*!
 *  @def    CC1352P_MESHNODE_GPIOName
 *  @brief  Enum of GPIO names
 */
typedef enum CC1352P_MESHNODE_GPIOName {
    CC1352P_MESHNODE_GPIO_PIN_RLED = 0,
    CC1352P_MESHNODE_GPIO_PIN_GLED,
    CC1352P_MESHNODE_GPIO_PIN_BTN1,
    CC1352P_MESHNODE_GPIO_UART0_RX,
    CC1352P_MESHNODE_GPIO_UART0_TX,
    CC1352P_MESHNODE_GPIO_UART1_RX,
    CC1352P_MESHNODE_GPIO_UART1_TX,
    CC1352P_MESHNODE_GPIO_SPI0_MOSI,
    CC1352P_MESHNODE_GPIO_SPI0_MISO,
    CC1352P_MESHNODE_GPIO_SPI0_CLK,
    CC1352P_MESHNODE_GPIO_SPI0_CSN,
    CC1352P_MESHNODE_GPIO_DIO_SEL_RF_24GHZ,
    CC1352P_MESHNODE_GPIO_DIO_SEL_RF_HIGH_PA,
    CC1352P_MESHNODE_GPIO_DIO_SEL_RF_SUB1GHZ,
    CC1352P_MESHNODE_GPIO_DIO_USBCONNECTED,
    CC1352P_MESHNODE_GPIO_DIO_ANTSEL_SUBGHZ,
    CC1352P_MESHNODE_GPIO_DIO_ANTSEL_EXT,
    CC1352P_MESHNODE_GPIO_DIO_ANTSEL_24GHZ,
    CC1352P_MESHNODE_GPIO_DIO_CONNECT_BATT,
    CC1352P_MESHNODE_GPIO_DIO_CHARGER_EN,
    CC1352P_MESHNODE_GPIO_DIO_CHARGER_STAT,
    CC1352P_MESHNODE_GPIO_DIO_BLE_GPIO,
    CC1352P_MESHNODE_GPIO_DIO_FLASH_RESETn,
    CC1352P_MESHNODE_GPIO_DIO_FLASH_WPn,
    CC1352P_MESHNODE_GPIOCOUNT
} CC1352P_MESHNODE_GPIOName;

/*!
 *  @def    CC1352P_MESHNODE_GPTimerName
 *  @brief  Enum of GPTimer parts
 */
typedef enum CC1352P_MESHNODE_GPTimerName {
    CC1352P_MESHNODE_GPTIMER0A = 0,
    CC1352P_MESHNODE_GPTIMER0B,
    CC1352P_MESHNODE_GPTIMER1A,
    CC1352P_MESHNODE_GPTIMER1B,
    CC1352P_MESHNODE_GPTIMER2A,
    CC1352P_MESHNODE_GPTIMER2B,
    CC1352P_MESHNODE_GPTIMER3A,
    CC1352P_MESHNODE_GPTIMER3B,

    CC1352P_MESHNODE_GPTIMERPARTSCOUNT
} CC1352P_MESHNODE_GPTimerName;

/*!
 *  @def    CC1352P_MESHNODE_GPTimers
 *  @brief  Enum of GPTimers
 */
typedef enum CC1352P_MESHNODE_GPTimers {
    CC1352P_MESHNODE_GPTIMER0 = 0,
    CC1352P_MESHNODE_GPTIMER1,
    CC1352P_MESHNODE_GPTIMER2,
    CC1352P_MESHNODE_GPTIMER3,

    CC1352P_MESHNODE_GPTIMERCOUNT
} CC1352P_MESHNODE_GPTimers;

/*!
 *  @def    CC1352P_MESHNODE_I2CName
 *  @brief  Enum of I2C names
 */
typedef enum CC1352P_MESHNODE_I2CName {
#if TI_I2C_CONF_I2C0_ENABLE
    CC1352P_MESHNODE_I2C0 = 0,
#endif

    CC1352P_MESHNODE_I2CCOUNT
} CC1352P_MESHNODE_I2CName;

/*!
 *  @def    CC1352P_MESHNODE_I2SName
 *  @brief  Enum of I2S names
 */
typedef enum CC1352P_MESHNODE_I2SName {
    CC1352P_MESHNODE_I2S0 = 0,

    CC1352P_MESHNODE_I2SCOUNT
} CC1352P_MESHNODE_I2SName;

/*!
 *  @def    CC1352P_MESHNODE_NVSName
 *  @brief  Enum of NVS names
 */
typedef enum CC1352P_MESHNODE_NVSName {
#if TI_NVS_CONF_NVS_INTERNAL_ENABLE
    CC1352P_MESHNODE_NVSCC26XX0 = 0,
#endif
#if TI_NVS_CONF_NVS_EXTERNAL_ENABLE
    CC1352P_MESHNODE_NVSSPI25X0,
#endif

    CC1352P_MESHNODE_NVSCOUNT
} CC1352P_MESHNODE_NVSName;

/*!
 *  @def    CC1352P_MESHNODE_PWMName
 *  @brief  Enum of PWM outputs
 */
typedef enum CC1352P_MESHNODE_PWMName {
    CC1352P_MESHNODE_PWM0 = 0,
    CC1352P_MESHNODE_PWM1,
    CC1352P_MESHNODE_PWM2,
    CC1352P_MESHNODE_PWM3,
    CC1352P_MESHNODE_PWM4,
    CC1352P_MESHNODE_PWM5,
    CC1352P_MESHNODE_PWM6,
    CC1352P_MESHNODE_PWM7,

    CC1352P_MESHNODE_PWMCOUNT
} CC1352P_MESHNODE_PWMName;

/*!
 *  @def    CC1352P_MESHNODE_SDName
 *  @brief  Enum of SD names
 */
typedef enum CC1352P_MESHNODE_SDName {
    CC1352P_MESHNODE_SDSPI0 = 0,

    CC1352P_MESHNODE_SDCOUNT
} CC1352P_MESHNODE_SDName;

/*!
 *  @def    CC1352P_MESHNODE_SPIName
 *  @brief  Enum of SPI names
 */
typedef enum CC1352P_MESHNODE_SPIName {
#if TI_SPI_CONF_SPI0_ENABLE
    CC1352P_MESHNODE_SPI0 = 0,
#endif
#if TI_SPI_CONF_SPI1_ENABLE
    CC1352P_MESHNODE_SPI1,
#endif

    CC1352P_MESHNODE_SPICOUNT
} CC1352P_MESHNODE_SPIName;

/*!
 *  @def    CC1352P_MESHNODE_UARTName
 *  @brief  Enum of UARTs
 */
typedef enum CC1352P_MESHNODE_UARTName {
#if TI_UART_CONF_UART0_ENABLE
    CC1352P_MESHNODE_UART0 = 0,
#endif
#if TI_UART_CONF_UART1_ENABLE
    CC1352P_MESHNODE_UART1,
#endif

    CC1352P_MESHNODE_UARTCOUNT
} CC1352P_MESHNODE_UARTName;

/*!
 *  @def    CC1352P_MESHNODE_UDMAName
 *  @brief  Enum of DMA buffers
 */
typedef enum CC1352P_MESHNODE_UDMAName {
    CC1352P_MESHNODE_UDMA0 = 0,

    CC1352P_MESHNODE_UDMACOUNT
} CC1352P_MESHNODE_UDMAName;

/*!
 *  @def    CC1352P_MESHNODE_WatchdogName
 *  @brief  Enum of Watchdogs
 */
typedef enum CC1352P_MESHNODE_WatchdogName {
    CC1352P_MESHNODE_WATCHDOG0 = 0,

    CC1352P_MESHNODE_WATCHDOGCOUNT
} CC1352P_MESHNODE_WatchdogName;


#ifdef __cplusplus
}
#endif

#endif /* __CC1352P_MESHNODE_BOARD_H__ */
